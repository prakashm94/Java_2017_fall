/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Patient;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Hospital.Doctor;
import Business.Hospital.Perscription;
import Business.Hospital.Report;
import Business.Organization.HospitalOrganization;
import Business.Sytem.Conditions;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PatientWorkRequest;
import Business.WorkQueue.PharmacyWorkRequest;
import Business.WorkQueue.PrescriptionWorkRequest;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import java.awt.BorderLayout;
import java.awt.Color;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.locks.Condition;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sonal
 */
public class PatientAppointmentJPanel extends javax.swing.JPanel {

    EcoSystem business;
    HospitalOrganization organization;
    UserAccount account;
    Report patientReport = null;

    /**
     * Creates new form PatientAppointmentJPanel
     */
    PatientAppointmentJPanel(EcoSystem business, HospitalOrganization organization, UserAccount account) {
        initComponents();
        this.business = business;
        this.account = account;
        this.organization = organization;
        populateDoctorCCombo(organization);

        patientTextField.setText(account.getPatient().getPatientName());

        populateWorkQueueTable();
        //    checkComplete();

    }

    public void populateWorkQueueTable() {
        DefaultTableModel model = (DefaultTableModel) appointmentTable.getModel();

        model.setRowCount(0);

        for (WorkRequest work : account.getWorkQueue().getWorkRequestList()) {
            System.out.println(work.getEmail() + "    email");
            if (work instanceof PatientWorkRequest) {
                Object[] row = new Object[3];
                row[0] = ((PatientWorkRequest) work).getDoctor();
                row[1] = ((PatientWorkRequest) work).getRequestDate();
                row[2] = ((PatientWorkRequest) work).getStatus();
                model.addRow(row);
            }
        }
    }

    public void populateDoctorCCombo(HospitalOrganization organization) {
        doctorCombo.removeAllItems();

        for (Doctor d : organization.getHosDoctorDir().getDoctorList()) {
            doctorCombo.addItem(d);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        appointmentJBtn = new javax.swing.JButton();
        patientTextField = new javax.swing.JTextField();
        doctorCombo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        appointmentTable = new javax.swing.JTable();
        cancelAppointment = new javax.swing.JButton();
        errLbl = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Dubai Medium", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Patient Appointment");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 180, -1, -1));

        jLabel3.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel3.setText("Name :");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 380, -1, -1));

        jLabel6.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel6.setText("Doctor Name :");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 430, -1, -1));

        appointmentJBtn.setBackground(new java.awt.Color(36, 47, 65));
        appointmentJBtn.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        appointmentJBtn.setForeground(new java.awt.Color(255, 255, 255));
        appointmentJBtn.setText("Confirm Appointment");
        appointmentJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentJBtnActionPerformed(evt);
            }
        });
        add(appointmentJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 540, 191, 36));

        patientTextField.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        add(patientTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 380, 191, -1));

        doctorCombo.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        add(doctorCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 430, 191, -1));

        jLabel1.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel1.setText("Date :");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 490, -1, -1));

        appointmentTable.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        appointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doctor Name", "Date", "status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(appointmentTable);
        if (appointmentTable.getColumnModel().getColumnCount() > 0) {
            appointmentTable.getColumnModel().getColumn(0).setResizable(false);
            appointmentTable.getColumnModel().getColumn(1).setResizable(false);
            appointmentTable.getColumnModel().getColumn(2).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 270, -1, 90));

        cancelAppointment.setBackground(new java.awt.Color(36, 47, 65));
        cancelAppointment.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        cancelAppointment.setForeground(new java.awt.Color(255, 255, 255));
        cancelAppointment.setText("Cancel Appointment");
        cancelAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelAppointmentActionPerformed(evt);
            }
        });
        add(cancelAppointment, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 370, -1, -1));

        errLbl.setForeground(new java.awt.Color(255, 51, 51));
        add(errLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 560, -1, -1));
        add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 480, -1, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utility/social-network-media-data-ss-1920.jpg"))); // NOI18N
        jLabel7.setText("jLabel3");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 2500, 250));
    }// </editor-fold>//GEN-END:initComponents

    private void appointmentJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointmentJBtnActionPerformed
        // TODO add your handling code here:
        errLbl.setText("");
        for (Report r : organization.getReportDir().getReportList()) {
            if (r.getPatient() != null) {
                if (r.getPatient().getUniquePatientId().equals(account.getPatient().getUniquePatientId())) {
                    patientReport = r;

                }
            }
        }
        if (patientReport.isFlag() == false) {
            Date x = jDateChooser1.getDate();
            if (patientTextField.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Please enter a name!");
            } else if (doctorCombo.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(null, "There is no doctor available, please contact the hospital");
            } else {

                SimpleDateFormat parser = new SimpleDateFormat("MM-dd-yyyy");
                String date = parser.format(x);
                System.out.println(date);

                if (date.equals("")) {
                    JOptionPane.showMessageDialog(null, "Please enter date", "Warning", JOptionPane.WARNING_MESSAGE);
                } else {
                    Calendar midnight = Calendar.getInstance();
                    midnight.set(Calendar.HOUR_OF_DAY, 0);
                    midnight.set(Calendar.MINUTE, 0);
                    midnight.set(Calendar.SECOND, 0);
                    midnight.set(Calendar.MILLISECOND, 0);
                    System.out.println("date bew" + midnight.getTime());
                    String backDateFlag="false";
                    if(midnight.getTime().after(x)){
                        backDateFlag="true";
                    }else{
                        backDateFlag="false";
                    }
                    if(backDateFlag=="false"){
                for (WorkRequest work : account.getWorkQueue().getWorkRequestList()) {

                    if (work instanceof PatientWorkRequest) {
                        if (account.getUsername().equalsIgnoreCase(work.getSender().getUsername())) {
                            if (work.getStatus().equalsIgnoreCase("Requested")) {
                                work.setStatus("Cancelled");
                            }
                        }

                    }
                }

                PatientWorkRequest request = new PatientWorkRequest();
                Doctor docName = (Doctor) doctorCombo.getSelectedItem();
                request.setDoctor((Doctor) doctorCombo.getSelectedItem());
                request.setStatus("Requested");
                request.setEmail(account.getPatient().getEmailid());
                request.setSender(account);
                Date newDate = null;
                try {
                    newDate = parser.parse(date);
                } catch (ParseException ex) {
                    Logger.getLogger(PatientAppointmentJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                request.setRequestDate(newDate);

                System.out.println(request.getEmail());
                for (UserAccount u : organization.getUserAccountDirectory().getUserAccountList()) {
                    //     System.out.println("doctor name: "+u.getEmployee().getName()+" "+ docName.getDocName());
                    if (u.getEmployee() != null) {
                        if (u.getEmployee().getName().equalsIgnoreCase(docName.getDocName())) {
                            u.getWorkQueue().getWorkRequestList().add(request);
                        }
                    }
                }
                account.getWorkQueue().getWorkRequestList().add(request);

                populateWorkQueueTable();
                JOptionPane.showMessageDialog(null, "Appointment Confirmed");
                }else{
                        JOptionPane.showMessageDialog(null, "Selected date can not be previous date");
                        
                    }
            }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Can not create an appointment, you are in rehab.");
        }
    }//GEN-LAST:event_appointmentJBtnActionPerformed

    private void cancelAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelAppointmentActionPerformed
        // TODO add your handling code here:
        int selectedRow = appointmentTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select the row to delete the account", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            WorkRequest work = (WorkRequest) appointmentTable.getValueAt(selectedRow, 0);
            if (work.getStatus().equalsIgnoreCase("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Request is already cancelled, can not cancel again");
            } else {

            }
        }
    }//GEN-LAST:event_cancelAppointmentActionPerformed
//    public void checkComplete() {
//        DefaultTableModel model = (DefaultTableModel) appointmentTable.getModel();
//
//        for (int i = 0; i <= model.getRowCount() - 1; i++) {
//            System.out.println(model.getValueAt(i, 2));
//            System.out.println(i);
//            while (model.getValueAt(i, 2).toString().equals("Completed")) {
//                model.removeRow(i);
//            }
//
//        }
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton appointmentJBtn;
    private javax.swing.JTable appointmentTable;
    private javax.swing.JButton cancelAppointment;
    private javax.swing.JComboBox doctorCombo;
    private javax.swing.JLabel errLbl;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField patientTextField;
    // End of variables declaration//GEN-END:variables
}
