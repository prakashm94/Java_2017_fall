/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Doctor;

import Business.EcoSystem;
import Business.Network.NetworkCountry;
import Business.Network.NetworkState;
import Business.Organization.HospitalOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PatientWorkRequest;
import Business.WorkQueue.PharmacyWorkRequest;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sonal
 */
public class ViewPatientListJPanel extends javax.swing.JPanel {

    EcoSystem business;
    JPanel userProcessContainer;
    HospitalOrganization organization;
    UserAccount account;
    NetworkCountry cNetwork;
    NetworkState sNetwork;

    /**
     * Creates new form ViewPatientListJPanel
     */
    ViewPatientListJPanel(JPanel userProcessContainer, EcoSystem business, HospitalOrganization organization, UserAccount account, NetworkCountry cNetwork, NetworkState sNetwork) {
        initComponents();
        this.business = business;
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.organization = organization;
        this.cNetwork = cNetwork;
        this.sNetwork = sNetwork;
        populateWorkQueueTable();
        // checkComplete();//removes request from table if completed
    }

    public void populateWorkQueueTable() {
        DefaultTableModel model = (DefaultTableModel) requestTable.getModel();

        model.setRowCount(0);
        if (account.getWorkQueue() == null) {
            account.setWorkQueue(new WorkQueue());
        }

        for (WorkRequest work : account.getWorkQueue().getWorkRequestList()) {

            if (work instanceof PatientWorkRequest) {
                System.out.println("userinter");
                Object[] row = new Object[3];
                row[0] = ((PatientWorkRequest) work).getSender();
                row[1] = ((PatientWorkRequest) work).getRequestDate();
                row[2] = work;
                model.addRow(row);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnComplete = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        requestTable = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("View All Patients");

        btnComplete.setText("Complete");
        btnComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleteActionPerformed(evt);
            }
        });

        requestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Date", "Name"
            }
        ));
        jScrollPane4.setViewportView(requestTable);

        btnDelete.setText("Delete request");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDelete)
                        .addContainerGap(1591, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnComplete, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(59, 59, 59)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnComplete, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(800, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = requestTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select the row to proceed", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {

            PatientWorkRequest p = (PatientWorkRequest) requestTable.getValueAt(selectedRow, 2);
            if (p.getStatus().equalsIgnoreCase("Cancelled")) {
                JOptionPane.showMessageDialog(null, "Appointment is already cancelled, you can not go further");
            } else if (p.getStatus().equalsIgnoreCase("Sent to Rehab")) {
                JOptionPane.showMessageDialog(null, "Patient is already sent to rehab");
            } else if (p.getStatus().equalsIgnoreCase("Completed")) {
                JOptionPane.showMessageDialog(null, "Appointment is already completed");
            } else {
                System.out.println("madhu" + p.getSender());
                addRequestJPanel addRequestJPanel1 = new addRequestJPanel(business, organization, account, p, cNetwork, sNetwork, userProcessContainer);
                userProcessContainer.add("ClinicManageEmployeeJPanel", addRequestJPanel1);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);
            }
        }

    }//GEN-LAST:event_btnCompleteActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnDeleteActionPerformed
//    public void checkComplete()
//    {
//        List<Integer> l1 = new ArrayList<>();
//        DefaultTableModel model = (DefaultTableModel) requestTable.getModel();
//        System.out.println("Row count is "+model.getRowCount());
//         for(int i =0;i<=model.getRowCount()-1;i++)
//         {
//            
//             System.out.println(model.getValueAt(i, 2));
//            
//            while(model.getValueAt(i, 2).toString().equals("Completed")){
//                model.removeRow(i);
//            
//            }
//              
//         }
//         
//         
//         
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnComplete;
    private javax.swing.JButton btnDelete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable requestTable;
    // End of variables declaration//GEN-END:variables
}
