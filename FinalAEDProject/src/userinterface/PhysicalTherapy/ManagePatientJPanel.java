/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PhysicalTherapy;

import Business.EcoSystem;
import Business.Hospital.Doctor;
import Business.Hospital.Patient;
import Business.Hospital.Perscription;
import Business.Hospital.Report;
import Business.Organization.HospitalOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DoctorWorkRequest;
import Business.WorkQueue.PatientWorkRequest;
import Business.WorkQueue.PharmacyWorkRequest;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sonal
 */
public class ManagePatientJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    HospitalOrganization organization;
    EcoSystem business;
    UserAccount account;
    Report patientReport = null;

    /**
     * Creates new form ManagePatientJPanel
     */
    public ManagePatientJPanel(JPanel userProcessContainer, EcoSystem business, HospitalOrganization organization, UserAccount account) {
        initComponents();
        this.business = business;
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.account = account;
        populateWorkQueueTable();

    }

    public void populateWorkQueueTable() {
        DefaultTableModel model = (DefaultTableModel) requestTable1.getModel();

        model.setRowCount(0);
        if (account.getWorkQueue() == null) {
            account.setWorkQueue(new WorkQueue());
        }
        for (WorkRequest work : account.getWorkQueue().getWorkRequestList()) {

            if (work instanceof DoctorWorkRequest) {
                System.out.println("userinter");
                Object[] row = new Object[4];
                row[0] = ((DoctorWorkRequest) work).getSender();
                row[1] = ((DoctorWorkRequest) work).getRequestDate();
                row[2] = work;
                row[3] = ((DoctorWorkRequest) work).getPwr().getPatientName();
                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        btnComplete = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        requestTable1 = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        apptDateTxt = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel1.setText("Patients sent by Doctors");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(186, 287, -1, -1));

        jLabel2.setFont(new java.awt.Font("Dubai Medium", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Physical Therapy Requests");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 120, -1, -1));
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(605, 127, 130, 20));

        btnComplete.setBackground(new java.awt.Color(36, 47, 65));
        btnComplete.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        btnComplete.setForeground(new java.awt.Color(255, 255, 255));
        btnComplete.setText("Complete");
        btnComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompleteActionPerformed(evt);
            }
        });
        add(btnComplete, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 440, 140, 50));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(485, 287, 270, 30));

        btnDelete.setBackground(new java.awt.Color(36, 47, 65));
        btnDelete.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Send Back");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 520, 140, 50));

        requestTable1.setBackground(new java.awt.Color(36, 47, 65));
        requestTable1.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        requestTable1.setForeground(new java.awt.Color(255, 255, 255));
        requestTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doctor Name", "Date", "Status", "Patient Name"
            }
        ));
        jScrollPane4.setViewportView(requestTable1);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(186, 324, 500, 90));

        jLabel10.setFont(new java.awt.Font("Dubai Medium", 0, 14)); // NOI18N
        jLabel10.setText("Set Appointment Date");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(186, 454, -1, -1));
        add(apptDateTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(323, 454, -1, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utility/maxresdefault.jpg"))); // NOI18N
        jLabel6.setText("jLabel3");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 2500, 250));
    }// </editor-fold>//GEN-END:initComponents

    private void btnCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = requestTable1.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select the row to assign the account", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {

            DoctorWorkRequest d = (DoctorWorkRequest) requestTable1.getValueAt(selectedRow, 2);

            if (d.getStatus().equals("Requested")) {
                UserAccount a = d.getSender();
                d.setStatus("Completed");

                d.getPwr().setStatus("Completed");
                apptDateTxt.setEnabled(false);
                JOptionPane.showMessageDialog(null, "You have successfully completed the request, this patient dont require a follow-up date ");

                populateWorkQueueTable();
            } else if (d.getStatus().equals("Completed")) {
                JOptionPane.showMessageDialog(null, "Request is already Completed");
            } else {
                JOptionPane.showMessageDialog(null, "Request is already cancelled");
            }

        }

    }//GEN-LAST:event_btnCompleteActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = requestTable1.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select the row to assign the account", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                Date dob = null;
                Date x = apptDateTxt.getDate();
                Doctor docName = null;
                SimpleDateFormat parser = new SimpleDateFormat("MM-dd-yyyy");
                String followUpDate = parser.format(x);
                Calendar midnight = Calendar.getInstance();
                midnight.set(Calendar.HOUR_OF_DAY, 0);
                midnight.set(Calendar.MINUTE, 0);
                midnight.set(Calendar.SECOND, 0);
                midnight.set(Calendar.MILLISECOND, 0);
                System.out.println("date bew" + midnight.getTime());
                String backDateFlag = "false";
                if (midnight.getTime().after(x)) {
                    backDateFlag = "true";
                } else {
                    backDateFlag = "false";
                }
                if (backDateFlag == "false") {
                    dob = parser.parse(followUpDate);
                    if (!dob.equals("")) {
                        DoctorWorkRequest d = (DoctorWorkRequest) requestTable1.getValueAt(selectedRow, 2);
                        if (d.getStatus().equals("Requested")) {
                            UserAccount a = d.getSender();

                            Date latestDate = null;
                            for (Report r : organization.getReportDir().getReportList()) {
                                if (r.getPatient() != null) {
                                    if (r.getPatient().getUniquePatientId().equals(d.getPwr().getSender().getPatient().getUniquePatientId())) {
                                        patientReport = r;
//               

                                    }
                                }
                            }
                            if (patientReport.getPerscriptionList() != null) {
                                for (Perscription p : patientReport.getPerscriptionList()) {

                                    Date perscDate = p.getFollowUp();

                                    Calendar calendar = Calendar.getInstance();
                                    calendar.setTime(perscDate);
                                    calendar.set(Calendar.HOUR_OF_DAY, 0);
                                    calendar.set(Calendar.MINUTE, 0);
                                    calendar.set(Calendar.SECOND, 0);
                                    calendar.set(Calendar.MILLISECOND, 0);

                                    if (latestDate == null && perscDate != null) {
                                        latestDate = perscDate;
                                    } else {

                                        if (perscDate.after(latestDate)) {
                                            latestDate = p.getFollowUp();

                                        }
                                    }
                                }
                            }
                            if (latestDate == null) {
                                for (Report r : organization.getReportDir().getReportList()) {
                                    for (WorkRequest work : account.getWorkQueue().getWorkRequestList()) {
                                        if (work instanceof DoctorWorkRequest) {
                                            if (r.getPatient().getUniquePatientId().equals(((DoctorWorkRequest) work).getPwr().getSender().getPatient().getUniquePatientId())) {
                                                r.setPtSuccessFlag(false);
                                                if (d.isPatientRefillRequest() == true) {
                                                    r.setPtRefillflag(true);
                                                } else {
                                                    r.setPtRefillflag(false);
                                                }
                                            }
                                        }
                                    }
                                }

                                dob = parser.parse(followUpDate);
                                for (Doctor doctor : organization.getHosDoctorDir().getDoctorList()) {
                                    for (Patient pat : organization.getHosPatientDir().getPatientList()) {
                                        if (pat.getUniquePatientId().equals(d.getPwr().getSender().getPatient().getUniquePatientId())) {
                                            if (doctor.getDoctorId().equals(d.getPwr().getDoctor().getDoctorId())) {
                                                docName = doctor;

                                                PatientWorkRequest request = new PatientWorkRequest();
                                                request.setDoctor(doctor);
                                                request.setStatus("Requested");

                                                request.setSender(d.getPwr().getSender());
                                                request.setRequestDate(dob);

                                                for (UserAccount u : organization.getUserAccountDirectory().getUserAccountList()) {

                                                    if (u.getEmployee() != null) {
                                                        if (d.getPwr().getDoctor().getDoctorId().equalsIgnoreCase(docName.getDoctorId())) {
                                                            u.getWorkQueue().getWorkRequestList().add(request);
                                                        }
                                                    }
                                                }
                                                d.getPwr().getSender().getWorkQueue().getWorkRequestList().add(request);

                                            }
                                        }
                                    }
                                }
                                d.setStatus("Completed");
                                d.getPwr().setStatus("Cancelled");
                                JOptionPane.showMessageDialog(null, "You have successfully sent back the request");

                                populateWorkQueueTable();
                            } else {
                                if (latestDate.after(dob)) {
                                    JOptionPane.showMessageDialog(null, "Date can not be back date", "Warning", JOptionPane.WARNING_MESSAGE);
                                    return;
                                } else {
                                    for (Report r : organization.getReportDir().getReportList()) {
                                        for (WorkRequest work : account.getWorkQueue().getWorkRequestList()) {
                                            if (work instanceof DoctorWorkRequest) {
                                                if (r.getPatient().getUniquePatientId().equals(((DoctorWorkRequest) work).getPwr().getSender().getPatient().getUniquePatientId())) {
                                                    r.setPtSuccessFlag(false);
                                                    if (d.isPatientRefillRequest() == true) {
                                                        r.setPtRefillflag(true);
                                                    } else {
                                                        r.setPtRefillflag(false);
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    for (Doctor doctor : organization.getHosDoctorDir().getDoctorList()) {
                                        for (Patient pat : organization.getHosPatientDir().getPatientList()) {
                                            if (pat.getUniquePatientId().equals(d.getPwr().getSender().getPatient().getUniquePatientId())) {
                                                if (doctor.getDoctorId().equals(d.getPwr().getDoctor().getDoctorId())) {
                                                    docName = doctor;

                                                    PatientWorkRequest request = new PatientWorkRequest();
                                                    request.setDoctor(doctor);
                                                    request.setStatus("Requested");

                                                    request.setSender(d.getPwr().getSender());
                                                    request.setRequestDate(dob);

                                                    for (UserAccount u : organization.getUserAccountDirectory().getUserAccountList()) {

                                                        if (u.getEmployee() != null) {
                                                            if (d.getPwr().getDoctor().getDoctorId().equalsIgnoreCase(docName.getDoctorId())) {
                                                                u.getWorkQueue().getWorkRequestList().add(request);
                                                            }
                                                        }
                                                    }
                                                    d.getPwr().getSender().getWorkQueue().getWorkRequestList().add(request);

                                                }
                                            }
                                        }
                                    }
                                    d.setStatus("Completed");
                                    d.getPwr().setStatus("Cancelled");
                                    JOptionPane.showMessageDialog(null, "You have successfully sent back the request");

                                    populateWorkQueueTable();
                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "You cannot sent it two times.");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Please select a date.");
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Selected date can not be previous date");
                }

                }catch (ParseException ex) {
                JOptionPane.showMessageDialog(null, "Invalid date format");
            }
            }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser apptDateTxt;
    private javax.swing.JButton btnComplete;
    private javax.swing.JButton btnDelete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable requestTable1;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
}
